{"name":"Appomatic","body":"Appomatic automates and abstracts away most of the boilerplate code and code generation of a typical Django project, reduces the amount of settings.py clutter and allows for distributing self contained single-click installable Django apps.\r\n\r\n### Installation\r\nTo install, run the following commands in a terminal (replace $NAME with any name\r\nyou see fit):\r\n\r\n   virtualenv $NAME\r\n   cd $NAME\r\n   . bin/activate\r\n   pip install appomatic\r\n   appomatic syncdb\r\n   appomatic runserver\r\n\r\nIn a web-browser, go to localhost:8000/admin and log in with the\r\nusername/password you entered in the syncdb step above. Click on\r\n\"Applications\" then \"Download new applications\" to install some\r\nusefull applications for your new site.\r\n\r\n### Writing your own Appomatic apps\r\nEvery Appomatic app is a pip package, named \"appomatic_$NAME\". It should contain one Python package of the same name, which in turn should contain a file named __app__.py, and optionally a file named __settings__.py and one named __urls__.py. __app__.py describes how the app is integrated with other apps (which order they are imported in etc), while the content of __settings__.py and __urls__.py is imported into settings.py and urls.py respectively. For good examples, check out the appomatic_* subdirectories inside the git repo :)\r\n\r\n","tagline":"The appomatic automatic Django environment","note":"Don't delete this file! It's used internally to help with page regeneration.","google":""}